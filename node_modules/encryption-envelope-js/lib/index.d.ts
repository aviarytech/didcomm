import sodium = require('libsodium-wrappers');
interface IUnpackedMsg {
    message: string;
    recipientKey: any;
    senderKey: any;
}
export declare class DIDComm {
    readonly Ready: Promise<undefined>;
    private sodium;
    /**
     * Creates a new PackUnpack object. The returned object contains a .Ready property:
     * a promise that must be resolved before the object can be used. You can
     * simply `await` the resolution of the .Ready property.
     *
     * Example:
     * const packUnpack = new PackUnpack
     * (async () => {
     *  await packUnpack.Ready
     * }())
     */
    constructor();
    /**
     *
     * Packs a message.
     * @param message string message to be encrypted
     * @param toKeys public key of the entity encrypting message for
     * @param fromKeys keypair of person encrypting message
     */
    packMessage(message: string, toKeys: Uint8Array[], fromKeys?: sodium.KeyPair | null): Promise<string>;
    /**
     * Unpacks a message
     * @param encMsg message to be decrypted
     * @param toKeys key pair of party decrypting the message
     */
    unpackMessage(encMsg: string, toKeys: sodium.KeyPair): Promise<IUnpackedMsg>;
    /**
     * Uses libsodium to generate a key pair, you may pass these keys into the pack/unpack functions
     */
    generateKeyPair(): Promise<sodium.KeyPair>;
    private b64url;
    private b64dec;
    private strB64dec;
    private encryptPlaintext;
    private decryptPlaintext;
    private prepareRecipientKeys;
    private locateRecKey;
}
export {};
