"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.genKey = exports.random = exports.genBls12381 = exports.genEd25519 = exports.noWork = exports.sha256Hash = exports.didKey = exports.didSov = void 0;
const ed25519 = __importStar(require("@stablelib/ed25519"));
const bls12381_key_pair_1 = require("@mattrglobal/bls12381-key-pair");
const sha256_1 = require("@stablelib/sha256");
const b58_1 = __importDefault(require("b58"));
const crypto_1 = __importDefault(require("crypto"));
/* work methods */
const didSov = (target, pubKey) => {
    const keyStr = b58_1.default.encode(pubKey.slice(16));
    return keyStr.substr(0, target.length) === target;
};
exports.didSov = didSov;
const didKey = (target, pubKey) => {
    const keyStr = b58_1.default.encode(pubKey);
    return keyStr.substr(0, target.length) === target;
};
exports.didKey = didKey;
const sha256Hash = (target, pubKey) => {
    const keyStr = Buffer.from(sha256_1.hash(pubKey)).toString("hex");
    return keyStr.substr(0, target.length) === target;
};
exports.sha256Hash = sha256Hash;
const noWork = (target, pubKey) => {
    return true;
};
exports.noWork = noWork;
/* key methods */
const genEd25519 = () => __awaiter(void 0, void 0, void 0, function* () {
    const key = ed25519.generateKeyPair();
    return { priv: key.secretKey, pub: key.publicKey };
});
exports.genEd25519 = genEd25519;
const genBls12381 = () => __awaiter(void 0, void 0, void 0, function* () {
    const key = yield bls12381_key_pair_1.Bls12381G2KeyPair.generate();
    return { priv: key.privateKeyBuffer, pub: key.publicKeyBuffer };
});
exports.genBls12381 = genBls12381;
const random = () => __awaiter(void 0, void 0, void 0, function* () {
    const rand = crypto_1.default.randomBytes(16);
    return { priv: rand, pub: rand };
});
exports.random = random;
/* key generator method - recursively searches for a key pair that matches the specified requirements */
const genKey = (target, keyGenMethod = exports.genEd25519, workMethod = exports.sha256Hash) => __awaiter(void 0, void 0, void 0, function* () {
    const key = yield keyGenMethod();
    if (workMethod(target, key.pub)) {
        return {
            priv: b58_1.default.encode(key.priv),
            privHash: Buffer.from(sha256_1.hash(key.priv)).toString("hex"),
            pub: b58_1.default.encode(key.pub),
            pubHash: Buffer.from(sha256_1.hash(key.pub)).toString("hex"),
        };
    }
    return exports.genKey(target, keyGenMethod, workMethod);
});
exports.genKey = genKey;
//# sourceMappingURL=index.js.map